// Mocks generated by Mockito 5.1.0 from annotations
// in examples_module/feature/update_counter/store/counter_store_test.dart.
// Do not manually edit this file.

import 'package:examples_module/feature/update_counter/observable/counter_observable.dart'
    as _i2;
import 'package:examples_module/feature/update_counter/store/counter-store.dart'
    as _i4;
import 'package:examples_module/feature/update_counter/store/counter_store_test.dart'
    as _i5;
import 'package:hooks_riverpod/hooks_riverpod.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCounterObservable_0 extends _i1.Fake
    implements _i2.CounterObservable {}

class _FakeProviderContainer_1 extends _i1.Fake
    implements _i3.ProviderContainer {}

/// A class which mocks [CounterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockCounterStore extends _i1.Mock implements _i4.CounterStore {
  MockCounterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CounterObservable get counterO =>
      (super.noSuchMethod(Invocation.getter(#counterO),
          returnValue: _FakeCounterObservable_0()) as _i2.CounterObservable);

  @override
  _i3.ProviderContainer get providerContainer =>
      (super.noSuchMethod(Invocation.getter(#providerContainer),
          returnValue: _FakeProviderContainer_1()) as _i3.ProviderContainer);

  @override
  void updateCounter() =>
      super.noSuchMethod(Invocation.method(#updateCounter, []),
          returnValueForMissingStub: null);

  @override
  T readObservable<T>(_i3.StateProvider<T>? provider) =>
      (super.noSuchMethod(Invocation.method(#readObservable, [provider]),
          returnValue: _i5.mockReadObservable<T>(provider)) as T);

  @override
  void writeObservable<T>(_i3.StateProvider<T>? provider, T? value,
          {bool? cache = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #writeObservable, [provider, value], {#cache: cache}),
          returnValueForMissingStub: null);

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
}
